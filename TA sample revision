// Deduction.java 

package revisedms2;

// Base class for all deduction types
public abstract class Deduction {
    private final String name;  // Name of the deduction
    
    // Constructor to initialize the deduction name
    public Deduction(String name) {
        this.name = name;  // Set deduction name
    }
    
    // Abstract method to be implemented by subclasses for calculating the deduction amount
    public abstract double calculate(double basicSalary);
    
    // Getter method to retrieve the deduction name
    public String getName() {
        return name;  // Return name of deduction
    }
}

// SSSDeduction.java 

package revisedms2; 

public class SSSDeduction extends Deduction {
    // Constructor sets name to "SSS"
    public SSSDeduction() {
        super("SSS");  // Call parent constructor
    }

    // Calculate SSS contribution
    @Override
    public double calculate(double basicSalary) {
        if (basicSalary < 3250) return 135.0;         // Minimum bracket
        if (basicSalary >= 24750) return 1125.0;      // Maximum bracket
        double steps = Math.floor((basicSalary - 3250) / 500);  // Calculate steps
        return 135.0 + (steps + 1) * 22.50;          // Return calculated amount
    }
}

// PhilHelathDeduction.java 

package revisedms2;

public class PhilHealthDeduction extends Deduction {
    // Constructor sets name to "PhilHealth"
    public PhilHealthDeduction() {
        super("PhilHealth");  // Call parent constructor
    }

    // Calculate the PhilHealth contribution based on the given salary
    @Override
    public double calculate(double basicSalary) {
        if (basicSalary <= 10000) return 150.0;       // Fixed rate
        if (basicSalary < 60000) return basicSalary * 0.015;  // 1.5% calculation
        return 900.0;                                 // Maximum contribution
    }
}

// PagIBIGDeduction.java 

package revisedms2;

public class PagIBIGDeduction extends Deduction {
    // Constructor sets name to "Pag-IBIG"
    public PagIBIGDeduction() {
        super("Pag-IBIG");  // Call parent constructor
    }

    // Calculate the Pag-IBIG contribution based on the given salary
    @Override
    public double calculate(double basicSalary) {
        if (basicSalary >= 1000 && basicSalary <= 1500) 
            return basicSalary * 0.01;  // 1% for lower bracket
        if (basicSalary > 1500) 
            return basicSalary * 0.02;  // 2% for higher bracket
        return 0.0;                    // No contribution
    }
}


// PayrollCalculator.java 

package revisedms2;

import java.util.list;

public class PayrollCalculator {
    private List<Deduction> deductions;  // List of deductions
    
    // Initialize the PayrollCalculator with standard deductions
    public PayrollCalculator() {
        deductions = List.of(
        new SSSDeduction(),  // Add SSS
        new PhilHealthDeduction(),  // Add PhilHealth
        new PagIBIGDeduction() // Add Pag-IBIG
       
        );
    }

    // Calculate the total deductions based on the basic salary
    public double calculateTotalDeductions(double basicSalary) {
        return deductions.stream()  // Create stream
            .mapToDouble(d -> d.calculate(basicSalary))  // Calculate each
            .sum();  // Sum all deductions
    }

    // Calculate withholding tax based on taxable income using the Philippine tax brackets
    public static double calculateWithholdingTax(double taxableIncome) {
        if (taxableIncome <= 20832) return 0.0;                          // Tax exempt
        if (taxableIncome <= 33333) return (taxableIncome - 20833) * 0.20; // 20% bracket
        if (taxableIncome <= 66667) return 2500 + (taxableIncome - 33333) * 0.25; // 25%
        if (taxableIncome <= 166667) return 10833 + (taxableIncome - 66667) * 0.30; // 30%
        if (taxableIncome <= 666667) return 40833.33 + (taxableIncome - 166667) * 0.32; // 32%
        return 200833.33 + (taxableIncome - 666667) * 0.35;               // 35% bracket
    }
}


//Employee.java 

public class Employee {
    private String employeeNumber;   // Employee ID
    private String fullName;        // Full name
    private String birthday;        // Date of birth
    private double basicSalary;     // Monthly salary
    private double hourlyRate;      // Hourly wage

    // Constructor to initialize an employee's details 
    public Employee(String employeeNumber, String fullName, String birthday, 
                   double basicSalary, double hourlyRate) {
        this.employeeNumber = employeeNumber;  // Set ID
        this.fullName = fullName;              // Set name
        this.birthday = birthday;             // Set birthday
        this.basicSalary = basicSalary;       // Set salary
        this.hourlyRate = hourlyRate;         // Set hourly rate
    }

    // Getter methods for employee attributes 
    public String getEmployeeNumber() { 
        return employeeNumber; 
    }
    
    public String getFullName() { 
        return fullName; 
    }
    
    public String getBirthday() { 
        return birthday; 
    }
    
    public double getBasicSalary() { 
        return basicSalary; 
    }
    
    public double getHourlyRate() { 
        return hourlyRate; 
    }
}

// AttendanceRecord.java 

package revisedms2;

// Import necessary libraries
import java.io.BufferedReader;       // For reading files
import java.io.FileReader;            // For handling file reading operations 
import java.io.IOException;           // For handling input/output exceptions 
import java.text.ParseException;      // For handling date parsing errors
import java.text.SimpleDateFormat;    // For formatting and parsing dates
import java.util.Map;                   // For data structures and utility functions


    // Manages employee attendance records
public class AttendanceRecord {
    private Map<String, Map<String, String[]>> attendanceData;  // Employee -> Date -> Times
    
    // Initialize the attendance data structure
    public AttendanceRecord() {
        attendanceData = new HashMap<>();  // Create empty map
    }

    // Add attendance record for an employee on a given date 
    public void addAttendance(String empNumber, String date, String logIn, String logOut) {
        attendanceData.putIfAbsent(empNumber, new HashMap<>());  // Add employee if new
        attendanceData.get(empNumber).put(date, new String[]{logIn, logOut});  // Add times
    }

    // Get records within a specified date range
    public Map<String, String[]> getAttendanceInRange(String empNumber, Date startDate, Date endDate) {
        Map<String, String[]> filteredRecords = new HashMap<>();  // Result storage
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");  // Date parser
        
        // Process each employee's attendance records
        attendanceData.getOrDefault(empNumber, new HashMap<>()).forEach((date, times) -> {
            try {
                Date currentDate = dateFormat.parse(date);  // Parse date
                // Check if the date falls within the specified range
                if (!currentDate.before(startDate) && !currentDate.after(endDate)) {
                    filteredRecords.put(date, times);  // Add to results
                }
            } catch (ParseException e) {
                System.err.println("Error parsing date: " + date);  // Handle error
            }
        });
        return filteredRecords;  // Return filtered attendance records
    }
}


//TimeCalculation.java 

package revisedms2;

import java.text.ParseException;      // For handling date parsing errors
import java.text.SimpleDateFormat;    // For formatting and parsing dates
import java.util.Date;                   // For data structures and utility functions

 // Calculate the time difference in minutes between login and logout 
    public static long calculateTimeDifferenceMinutes(String logIn, String logOut) {
        try {
            SimpleDateFormat format = new SimpleDateFormat("HH:mm");  // Time format
            Date timeIn = format.parse(logIn);  // Parse login time
            Date timeOut = format.parse(logOut); // Parse logout time
            return (timeOut.getTime() - timeIn.getTime()) / (60 * 1000);  // Difference in minutes
        } catch (ParseException e) {
            return -1;  // Error indicator
        }
    }

    // Converts total minutes into format string HH:mm
    public static String formatTimeDifference(long minutes) {
        return (minutes < 0) ? "Invalid" :  // Handle errors
            String.format("%d:%02d", minutes / 60, minutes % 60);  // Format as hours:minutes
    }
} 
